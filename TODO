- Write up NEWS explaining syberia integration
- syberia_init function for creating a syberia project.
- for model stage, maybe we should change the convention to:
  model = list(gbm = list(...), logreg = list(...))
  so that it follows similar conventions. (In syberia@multi_model_stage)
- mungebits should also be syberia resources and have train / predict
  setup methods in lib/mungebits
- let config/stages/import.r etc. function as default configurations for
  stages. For example, If we placed list(dep_var = 'default_indicator') 
  in config/stages/evaluation.r, then this would get merged into the
  a syberia definition missing evaluation/dep_var.
- Support whole stage-level unit tests ("before", "after", and "each")
- Figure out how to bring back github-based loading now that CI works in an ugly way

Stagerunner:

- Default run stage for a remembering stageRunner should be from the *last*
unfinished stage. DUH! How simple... (in syberia@model_env_presets and
stagerunner@mode_parameter)

Bigger items:

- Use opencpu's eval_fork to dynamically detach syberia runs from head.
  Have a jobs() helper.
- syberiaTutorial package for an interactive build-up tutorial of Syberia

Technicalities:

- Use Sys.glob built-in helper in syberiaStructure
- Incorporate setTimeLimit functionality (see openCPU package for help)
- Use base::reg.finalizer to clean up Syberia's cached environments
- Use Recall in recursive stageRunner methods
- Use rapply instead of nested helper lapply's
- More interesting functions: all.names, all.vars, agrep, abbreviate,
  browseEnv (especially on a stageRunner context), aregexec, Find, Position
- Use addTaskCallback in conjunction with running models.

